#include<iostream>
#include <stdio.h>
#define MAXV 1000 /* Максимальное количество вершин */
using namespace std;

typedef struct edgenode {
    int y;                    /* Сосед вершины м */
    int weight;               /* Вес ребра (x, y) */
    struct edgenode *next;    /* Следующий элемент в списке */
} edgenode;

typedef struct {
    edgenode *edges[MAXV+1];  /* Список смежности */
    int edge[MAXV + 1][MAXV + 1];
    int degree[MAXV+1];       /* Исходящая степень каждой вершины */
    int nvertices;            /* Количество вершин графа */
    int nedges;               /* Количество ребер графа */
    int directed;             /* Флаг, указывающий, является ли граф ориентированным */
} graph;

int discovered[MAXV+1];  /* Флаг открытия вершины */
int processed[MAXV+1];   /* Флаг обработки вершины */
int parent[MAXV+1];      /* Родительская вершина в обходе дерева */
int components[MAXV+1];  /* Индекс компоненты связности для каждой вершины */

void insert_edge(graph *g, int x, int y, bool directed) {
   
   edgenode *р ;   
   
   р = new edgenode();
   
   p->weight = 0;
   р->у = у;
   p->next = g->edges[x];
   
   g->edges[x] = р;
   g->degree[x]++; 
   
   if ( directed == false) 
       insert_edge(g, у, х, true);
    else 
       g->nedges++; 
}

void process_vertex_early(int v) {
    printf("%d ", v);
}

void initialize_search(graph *g) {
    int i;
    for (i = 1; i <= g->nvertices; i++) {
        discovered[i] = processed[i] = 0;
        parent[i] = false ;
    }
}

void bfs(graph *g, int start) {
    int queue[MAXV];
    edgenode *p;  /* Указатель на ребро */
    int v;        /* Текущая вершина */
    int y;        /* Соседняя вершина */
    int front = 0, rear = 0;

    discovered[start] = true;
    queue[rear++] = start;  /* Функция добавления в очередь */

    while (front < rear) {
        v = queue[front++];  /* Функция удаления из очереди */
        process_vertex_early(v);
        processed[v] = true;
        p = g->edges[v];
        
        for (int y = 1; y <= g->nvertices; y++) {
            if (g->directed) { 
                if (!discovered[y]) {
                    discovered[y] = true;
                    queue[rear++] = y;
                }
            }
        }
    }    
}

void connected_components(graph *g) {
    int c;
    int i;

    initialize_search(g);
    c = 0;
    for (i = 1; i <= g->nvertices; i++) {
        if (!discovered[i]) {
            c = c + 1;
            printf("Component %d: ", c);
            bfs(g, i);
            printf("\n");
        }
    }
}


int main() {
    graph g;
    int i;

    /* Инициализация графа */
    g.nvertices = 4;
    g.nedges = 4;
    g.directed = 0;

    /* Инициализация списка смежности */
    for (i = 1; i <= g.nvertices; i++) {
        g.edges[i] = NULL;
        g.degree[i] = 0;
    }

    /* Добавление ребер */
    insert_edge(&g, 1, 2, true);
    insert_edge(&g, 2, 3, true);
    insert_edge(&g, 3, 4, true);
    insert_edge(&g, 4, 1, true);

    connected_components(&g);

    return 0;
}